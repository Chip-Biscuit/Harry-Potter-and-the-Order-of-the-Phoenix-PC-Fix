#include <Windows.h>
#include <iostream>

// Function to continuously monitor and modify memory
void MonitorMemory() {
    // Define the float value to set
    float floatNewValue = 60.0f;

    // Define the offset to write the new float value
    DWORD offset = 0x008E4C54;

    // Get handle to the current process
    HANDLE hProcess = GetCurrentProcess();
    if (hProcess == NULL) {
        // MessageBox(NULL, L"Failed to get handle to current process.", L"Error", MB_OK | MB_ICONERROR);
        return;
    }

    // Change memory protection to allow writing
    DWORD oldProtect;
    if (!VirtualProtectEx(hProcess, reinterpret_cast<LPVOID>(offset), sizeof(float), PAGE_EXECUTE_READWRITE, &oldProtect)) {
        // MessageBox(NULL, L"Failed to change memory protection.", L"Error", MB_OK | MB_ICONERROR);
        return; // Exit the function if memory protection cannot be changed
    }

    // Continuous monitoring loop
    while (true) {
        // Read the current value from memory
        float currentValue;
        if (!ReadProcessMemory(hProcess, reinterpret_cast<LPVOID>(offset), &currentValue, sizeof(float), NULL)) {
            // MessageBox(NULL, L"Failed to read memory.", L"Error", MB_OK | MB_ICONERROR);
            break;
        }

        // If the current value is not 60.0f, set it back to 60.0f
        if (currentValue != 60.0f) {
            if (!WriteProcessMemory(hProcess, reinterpret_cast<LPVOID>(offset), &floatNewValue, sizeof(float), NULL)) {
                // MessageBox(NULL, L"Failed to write memory.", L"Error", MB_OK | MB_ICONERROR);
                break;
            }
            // MessageBox(NULL, L"Value frozen at 60.0f.", L"Info", MB_OK | MB_ICONINFORMATION);
        }

        // Adjust the sleep duration as needed
        Sleep(10);
    }

    // Cleanup code
    // Unhook from the game process, free resources, etc.
}

// Entry point of the DLL
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved) {
    switch (fdwReason) {
    case DLL_PROCESS_ATTACH:
        // Start monitoring memory when DLL is attached to a process
        CreateThread(NULL, 0, reinterpret_cast<LPTHREAD_START_ROUTINE>(MonitorMemory), NULL, 0, NULL);
        break;
    case DLL_PROCESS_DETACH:
        // Cleanup code when DLL is detached from a process (i.e., when the game closes)
        break;
    }
    return TRUE;
}
